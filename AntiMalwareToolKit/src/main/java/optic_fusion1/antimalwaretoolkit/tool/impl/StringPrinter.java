package optic_fusion1.antimalwaretoolkit.tool.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import static optic_fusion1.antimalwaretoolkit.Main.LOGGER;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class StringPrinter extends Tool {

  private Base64.Decoder decoder = Base64.getDecoder();

  @Override
  public void run(List<String> args) {
    if (args.get(0).equalsIgnoreCase("all")) {
      File dir = new File(args.isEmpty() ? "." : args.get(1));
      if (!dir.exists()) {
        LOGGER.info("The directory " + dir.getName() + " doesn't exist");
        return;
      }
      LOGGER.info(dir.getName() + " has " + dir.listFiles().length + " files");
      for (File file : dir.listFiles()) {
        if (!file.isDirectory() && file.getName().endsWith(".jar")) {
          printStrings(dir.toString() + "\\" + file.getName());
        }
      }
      return;
    }
    if (!args.get(0).endsWith(".jar")) {
      LOGGER.info(args.get(0) + " is not a jar");
      return;
    }
    printStrings(args.get(0));
  }

  private void printStrings(String fileName) {
    try {
      ZipFile zipFile = new ZipFile(new File(fileName));
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      while (entries.hasMoreElements()) {
        ZipEntry entry = (ZipEntry) entries.nextElement();
        if (entry.isDirectory() || !entry.getName().endsWith(".class")) {
          LOGGER.info(entry.getName() + " is either a directory or not a class");
          continue;
        }
        InputStream inputStream = zipFile.getInputStream(entry);
        ClassReader classReader;
        try {
          classReader = new ClassReader(inputStream);
        } catch (Exception e) {
          LOGGER.info("Couldn't read " + entry.getName());
          continue;
        }
        ClassNode classNode = new ClassNode();
        classReader.accept(classNode, 0);
        for (MethodNode method : classNode.methods) {
          for (AbstractInsnNode insnNode : method.instructions.toArray()) {
            if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
              String str = ((LdcInsnNode) insnNode).cst.toString();
              LOGGER.info(fileName.split("id")[1].split("_")[0] + "|" + classNode.name
                      + "|" + method.name + "|" + str);
            }
          }
        }
      }
    } catch (IOException ex) {
      ex.printStackTrace();
    }
  }

  @Override
  public String getDescription() {
    return "Prints every string in the provided jar";
  }

}
