package optic_fusion1.antimalwaretoolkit.util;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class NumberConversions {

  private NumberConversions() {
  }

  public static int toInt(@Nullable final Object object) {
    if (object == null) {
      return 0;
    }
    if (object instanceof Number) {
      return ((Number) object).intValue();
    }
    try {
      return Integer.parseInt(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0;
  }

  public static float toFloat(@Nullable final Object object) {
    if (object == null) {
      return 0.0f;
    }
    if (object instanceof Number) {
      return ((Number) object).floatValue();
    }
    try {
      return Float.parseFloat(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0.0f;
  }

  public static double toDouble(@Nullable final Object object) {
    if (object == null) {
      return 0.0;
    }
    if (object instanceof Number) {
      return ((Number) object).doubleValue();
    }
    try {
      return Double.parseDouble(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0.0;
  }

  public static long toLong(@Nullable final Object object) {
    if (object == null) {
      return 0L;
    }
    if (object instanceof Number) {
      return ((Number) object).longValue();
    }
    try {
      return Long.parseLong(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0L;
  }

  public static short toShort(@Nullable final Object object) {
    if (object == null) {
      return 0;
    }
    if (object instanceof Number) {
      return ((Number) object).shortValue();
    }
    try {
      return Short.parseShort(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0;
  }

  public static byte toByte(@Nullable final Object object) {
    if (object == null) {
      return 0;
    }
    if (object instanceof Number) {
      return ((Number) object).byteValue();
    }
    try {
      return Byte.parseByte(object.toString());
    } catch (NumberFormatException ignored) {
    }
    return 0;
  }

  public static boolean isFinite(final double d) {
    return Math.abs(d) <= Double.MAX_VALUE;
  }

  public static boolean isFinite(final float f) {
    return Math.abs(f) <= Float.MAX_VALUE;
  }

  public static void checkFinite(final double d, @NotNull final String message) {
    if (!isFinite(d)) {
      throw new IllegalArgumentException(message);
    }
  }

  public static void checkFinite(final float d, @NotNull final String message) {
    if (!isFinite(d)) {
      throw new IllegalArgumentException(message);
    }
  }
}
