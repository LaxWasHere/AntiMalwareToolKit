package optic_fusion1.smplugin.runtimeprotect;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import static optic_fusion1.smplugin.SecurityManager.LOGGER;
import org.bukkit.configuration.file.YamlConfiguration;

// TODO: Make all of these translatable
public class PluginIndex {

  private final List<IndexedPlugin> plugins = new ArrayList<>();

  public IndexedPlugin getClassOwner(String className) {
    return plugins.stream().filter(plugin -> plugin.getClasses().contains(className)).findFirst().orElse(null);
  }

  public IndexedPlugin getPlugin(String name) {
    return plugins.stream().filter(plugin -> plugin.getName().equalsIgnoreCase(name)).findFirst().orElse(null);
  }

  public void indexPlugins(File pluginsFolder) {
    LOGGER.info("Indexing plugins...");
    File[] files = pluginsFolder.listFiles();

    if (files != null) {

      for (File file : files) {
        if ((file.isFile()) && (file.getName().endsWith(".jar"))) {
          try {
            ZipFile zipFile = new ZipFile(file);
            Enumeration<? extends ZipEntry> entries = zipFile.entries();

            List<String> pluginClasses = new ArrayList<>();
            String pluginName = null;
            String pluginMainClass = null;

            while (entries.hasMoreElements()) {
              ZipEntry entry = entries.nextElement();
              String entryName = entry.getName();

              if ((entryName.equals("plugin.yml")) || (entryName.equals("bungee.yml"))) {
                try {
                  YamlConfiguration yaml = new YamlConfiguration();
                  yaml.load(new InputStreamReader(zipFile.getInputStream(entry)));

                  // Some BungeeCord plugins only have 'plugin.yml'. But some (like Keiko itself)
                  // have got both 'plugin.yml' and 'bungee.yml' at the same time. In order to
                  // get the proper plugin data file for our current platform type, we check
                  // if plugin name/main are already assigned, and if so, we only overwrite them
                  // if the JAR entry currently being read is 'bungee.yml' and the server is
                  // BungeeCord. Otherwise we're fine with just 'plugin.yml'.
                  if ((pluginName == null) || ((entryName.equals("bungee.yml")))) {
                    pluginName = yaml.getString("name");
                  }

                  if ((pluginMainClass == null) || ((entryName.equals("bungee.yml")))) {
                    pluginMainClass = yaml.getString("main");
                  }
                } catch (Exception ex) {
                  LOGGER.warn("Invalid plugin.yml in %s", file.getName());
                }
              } else if (entryName.endsWith(".class")) {
                // 'my/cool/Class.class' => 'my.cool.Class'
                String className = entryName.
                        replace(".class", "").
                        replace("/", ".");

                if (className.contains("$")) // 'my.cool.Class$1' => 'my.cool.Class'
                {
                  className = className.split(Pattern.quote("$"))[0];
                }

                if (!(pluginClasses.contains(className))) {
                  pluginClasses.add(className);
                }
              }
            }

            zipFile.close();
            String finalPluginMainClass = pluginMainClass;

            // Validate plugin...
            if (pluginName == null) {
              LOGGER.warn("Invalid plugin %s: "
                      + "missing 'name' in plugin.yml (or no plugin.yml)", file.getName());
            } else if (pluginMainClass == null) {
              LOGGER.warn("Invalid plugin %s: "
                      + "missing 'main' in plugin.yml (or no plugin.yml)", file.getName());
            } else if (pluginClasses.stream().noneMatch(finalPluginMainClass::equals)) {
//              LOGGER.warn("Invalid plugin %s: "
//                      + "class %s is declared is main in plugin.yml but is missing in the JAR",
//                      file.getName(), pluginMainClass);
            } else {
              // Plugin is valid, add it to context
              plugins.add(new IndexedPlugin(file, pluginClasses, pluginName, pluginMainClass));
//              LOGGER.debug("Indexed plugin %s with name %s. Classes: %s. Main class: %s",
//                      file.getName(), pluginName, pluginClasses.size(), pluginMainClass);
            }
          } catch (Exception ex) {
            LOGGER.warn("Failed to index plugin %s, is it valid?", file.getName());
            LOGGER.warn("Stacktrace:");

            ex.printStackTrace();
          }
        }
      }

      LOGGER.info("Successfully indexed %s plugins.", plugins.size());
    } else {
      throw new RuntimeException("missing plugins folder???");
    }
  }
}
