package optic_fusion1.smplugin.runtimeprotect;

import java.net.InetAddress;
import java.security.Permission;
import static optic_fusion1.smplugin.SecurityManager.LOGGER;
import optic_fusion1.smplugin.runtimeprotect.callerinfo.CallerInfo;
import optic_fusion1.smplugin.runtimeprotect.callerinfo.RuntimeUtils;
//TODO: Make all of these translatable
//TODO: Add a metric for this, either giving the total amount of times a plugin triggered the Security Manager, or adding a metric (and measurements) for each method

public class AntiMalwareSecurityManager extends SecurityManager {

  public AntiMalwareSecurityManager() {
  }

  @Override
  public void checkSecurityAccess(String target) {
    log(RuntimeUtils.getCallerInfo(), "checkSecurityAccess Target: " + target);
  }

  @Override
  public void checkRead(String file, Object context) {
    checkRead0(file, context);
  }

  @Override
  public void checkRead(String file) {
    checkRead0(file, null);
  }

  private void checkRead0(String file, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkRead File: " + file + (context != null ? "Context: " + context : ""));
  }

  @Override
  public void checkPropertyAccess(String key) {
    log(RuntimeUtils.getCallerInfo(), "checkPropertyAccess Key: " + key);
  }

  @Override
  public void checkPermission(Permission perm) {
    checkPermission0(perm, null);
  }

  @Override
  public void checkPermission(Permission perm, Object context) {
    checkPermission0(perm, context);
  }

  private void checkPermission0(Permission perm, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkPermission Perm: " + perm.toString() + (context != null ? " Context: " + context.toString() : ""));
  }

  @Override
  public void checkPackageDefinition(String pkg) {
    log(RuntimeUtils.getCallerInfo(), "checkPackageDefinition Pkg: " + pkg);
  }

  @Override
  public void checkPackageAccess(String pkg) {
    if (pkg.contains("java.util")) {
      return;
    }
    log(RuntimeUtils.getCallerInfo(), "checkPackageAccess Pkg: " + pkg);
  }

  @Override
  public void checkMulticast(InetAddress maddr) {
    log(RuntimeUtils.getCallerInfo(), "checkMulticast InetAddress: " + maddr.toString());
  }

  @Override
  public void checkListen(int port) {
    log(RuntimeUtils.getCallerInfo(), "checkListen Port: " + port);
  }

  @Override
  public void checkLink(String lib) {
    log(RuntimeUtils.getCallerInfo(), "checkLink Lib: " + lib);
  }

  @Override
  public void checkExec(String cmd) {
    log(RuntimeUtils.getCallerInfo(), "checkExec: " + cmd);
  }

  @Override
  public void checkWrite(String file) {
    log(RuntimeUtils.getCallerInfo(), "checkWrite File:" + file);
  }

  @Override
  public void checkExit(int status) {
    log(RuntimeUtils.getCallerInfo(), "checkExit Status: " + status);
  }

  @Override
  public void checkDelete(String file) {
    log(RuntimeUtils.getCallerInfo(), "checkDelete File: " + file);
  }

  @Override
  public void checkConnect(String host, int port, Object context) {
    checkConnect0(host, port, context);
  }

  @Override
  public void checkConnect(String host, int port) {
    checkConnect0(host, port, null);
  }

  private void checkConnect0(String host, int port, Object context) {
    log(RuntimeUtils.getCallerInfo(), "checkConnect Host: " + host + " Port: " + port + (context != null ? "Context: " + context : ""));
  }

  @Override
  public void checkAccess(ThreadGroup g) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess ThreadGroup: " + g.toString());
  }

  @Override
  public void checkAccess(Thread t) {
    log(RuntimeUtils.getCallerInfo(), "checkAccess Thread: " + t.toString());
  }

  @Override
  public void checkAccept(String host, int port) {
    log(RuntimeUtils.getCallerInfo(), "checkAccept Host: " + host + " Port:" + port);
  }

  private void log(CallerInfo callerInfo, String string) {
    if (callerInfo != null) {
      LOGGER.debug("[AntiMalwareSecurityManager] " + callerInfo.toString() + " " + string);
    } else {
      LOGGER.debug("[AntiMalwareSecurityManager] " + string);
    }
  }

}
