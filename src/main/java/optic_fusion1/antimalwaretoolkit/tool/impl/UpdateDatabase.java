package optic_fusion1.antimalwaretoolkit.tool.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import static optic_fusion1.antimalwaretoolkit.Main.LOGGER;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import optic_fusion1.antimalwaretoolkit.configuration.file.FileConfiguration;
import optic_fusion1.antimalwaretoolkit.configuration.file.YamlConfiguration;
import org.apache.commons.codec.digest.DigestUtils;

public class UpdateDatabase extends Tool {

  @Override
  public void run(List<String> args) {
    String directory = args.get(0).equals(".") ? "" : args.get(0);
    File[] files = new File(new File(directory).getAbsolutePath()).listFiles();
    if (files.length == 0) {
      LOGGER.info("There are no files");
      return;
    }
    LOGGER.info("Found " + files.length + " files");
    File databaseFile = new File(args.get(1));
    FileConfiguration databaseConfig = YamlConfiguration.loadConfiguration(databaseFile);
    for (File file : files) {
      if (!file.getName().endsWith(".jar")) {
        continue;
      }
      if (file.getName().equalsIgnoreCase("MCAntiMalware.jar") || file.getName().equals("AntiMalwareToolKit.jar")) {
        continue;
      }
      try {
        try (JarFile jarFile = new JarFile(file)) {
          JarEntry jarEntry;
          try {
            jarEntry = jarFile.getJarEntry("plugin.yml");
          } catch (Exception e) {
            e.printStackTrace();
            continue;
          }
          if (jarEntry == null) {
            try {
              jarEntry = jarFile.getJarEntry("bungee.yml");
            } catch (Exception e) {
              e.printStackTrace();
              continue;
            }
          }
          InputStream in = null;
          try {
            in = jarFile.getInputStream(jarEntry);
          } catch (Exception e) {
            e.printStackTrace();
            continue;
          }
          FileConfiguration pluginYml = null;
          try {
            pluginYml = YamlConfiguration.loadConfiguration(new BufferedReader(new InputStreamReader(in)));
          } catch (Exception e) {
            e.printStackTrace();
            continue;
          }
          String sha1 = "";
          try {
            sha1 = DigestUtils.sha1Hex(Files.newInputStream(file.toPath()));
          } catch (IOException e) {
            e.printStackTrace();;
          }
          String pluginName = "";
          String pluginAuthor = "";
          if (pluginYml.isSet("author") && !pluginYml.isList("author")) {
            pluginAuthor = pluginYml.getString("author").replaceAll(" ", "-").replaceAll("\\.", "-");
          }
          if (pluginYml.isSet("name")) {
            pluginName = pluginYml.getString("name").replaceAll(" ", "-").replaceAll("\\.", "-");
          }
          if (pluginAuthor.isEmpty()) {
            if (!databaseConfig.isSet(pluginName)) {
              List<String> checksums = new ArrayList<>();
              if (!checksums.contains(sha1)) {
                checksums.add(sha1);
              }
              databaseConfig.set(pluginName, checksums);
            } else {
              List<String> checksums = databaseConfig.getStringList(pluginName);
              if (!checksums.contains(sha1)) {
                checksums.add(sha1);
              }
              try {
                databaseConfig.set(pluginName, checksums);
              } catch (Exception e) {
                e.printStackTrace();
                continue;
              }
            }
          } else {
            if (!databaseConfig.isSet(pluginAuthor + "." + pluginName)) {
              List<String> checksums = new ArrayList<>();
              if (!checksums.contains(sha1)) {
                checksums.add(sha1);
              }
              try {
                databaseConfig.set(pluginAuthor + "." + pluginName, checksums);
              } catch (Exception ex) {
                ex.printStackTrace();
              }
            } else {
              List<String> checksums = databaseConfig.getStringList(pluginAuthor + "." + pluginName);
              if (!checksums.contains(sha1)) {
                checksums.add(sha1);
              }
              try {
                databaseConfig.set(pluginAuthor + "." + pluginName, checksums);
              } catch (Exception ex) {
                ex.printStackTrace();
              }
            }
          }
          in.close();
        }
      } catch (IOException ex) {
        ex.printStackTrace();
      }
    }
    try {
      databaseConfig.save(databaseFile);
    } catch (IOException ex) {
      ex.printStackTrace();
    }
    LOGGER.info("Finished updating database");
  }

  @Override
  public String getDescription() {
    return "Automatically adds jar checksums to a yaml file";
  }

}
