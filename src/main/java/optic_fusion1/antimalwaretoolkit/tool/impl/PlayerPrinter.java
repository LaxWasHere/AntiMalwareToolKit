package optic_fusion1.antimalwaretoolkit.tool.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import static optic_fusion1.antimalwaretoolkit.Main.LOGGER;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class PlayerPrinter extends Tool {

  //TODO: Missing UUIDs, probably missing other ways to detect player names
  @Override
  public void run(List<String> args) {
    if (args.get(0).equalsIgnoreCase("all")) {
      for (File file : new File(".").listFiles()) {
        try {
          if (!file.isDirectory() && file.getName().endsWith(".jar")) {
            printStrings(file.getName());
          }
        } catch (Exception e) {
          continue;
        }
      }
      LOGGER.info("FINISHED");
      return;
    }
    if (!args.get(0).endsWith(".jar")) {
      LOGGER.info(args.get(0) + " is not a jar");
      return;
    }
    printStrings(args.get(0));
  }

  private void printStrings(String fileName) {
    try {
      ZipFile zipFile = new ZipFile(new File(fileName));
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      while (entries.hasMoreElements()) {
        ZipEntry entry = (ZipEntry) entries.nextElement();
        if (entry.isDirectory() || !entry.getName().endsWith(".class")) {
          continue;
        }
        InputStream inputStream = zipFile.getInputStream(entry);
        ClassReader classReader;
        try {
          classReader = new ClassReader(inputStream);
        } catch (Exception e) {
          continue;
        }
        ClassNode classNode = new ClassNode();
        classReader.accept(classNode, 0);
        for (MethodNode method : classNode.methods) {
          for (AbstractInsnNode insnNode : method.instructions.toArray()) {
            if (insnNode instanceof MethodInsnNode) {
              MethodInsnNode methodInsnNode = (MethodInsnNode) insnNode;
              if (methodInsnNode.owner.equals("org/bukkit/Bukkit")) {
                if (methodInsnNode.name.equals("getPlayer")) {
                  LdcInsnNode ldcInsnNode2 = (LdcInsnNode) methodInsnNode.getPrevious();
                  LOGGER.info(ldcInsnNode2.cst.toString());
                }
              }
              if (methodInsnNode.owner.equals("org/bukkit/entity/Player") || methodInsnNode.owner.equals("org/bukkit/command/CommandSender")) {
                if (methodInsnNode.name.equals("getName") || methodInsnNode.name.equals("getDisplayName")) {
                  LdcInsnNode ldcInsnNode = (LdcInsnNode) methodInsnNode.getNext();
                  LOGGER.info(ldcInsnNode.cst.toString());
                  LdcInsnNode ldcInsnNode2 = (LdcInsnNode) methodInsnNode.getPrevious();
                  LOGGER.info(ldcInsnNode2.cst.toString());
                } else if (methodInsnNode.name.equals("getUniqueId")) {
                  LdcInsnNode ldcInsnNode = (LdcInsnNode) methodInsnNode.getNext();
                  LOGGER.info(ldcInsnNode.cst.toString());
                  LdcInsnNode ldcInsnNode2 = (LdcInsnNode) methodInsnNode.getPrevious();
                  LOGGER.info(ldcInsnNode2.cst.toString());
                }
              }
            }
          }
        }
      }
    } catch (IOException ex) {
      ex.printStackTrace();
    }
  }

}
