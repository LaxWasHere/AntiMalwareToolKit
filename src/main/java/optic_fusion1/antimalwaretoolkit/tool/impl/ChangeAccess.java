package optic_fusion1.antimalwaretoolkit.tool.impl;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;
import static optic_fusion1.antimalwaretoolkit.Main.LOGGER;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.ClassNode;

public class ChangeAccess extends Tool {

  @Override
  public void run(List<String> args) {
    if (args.get(0).equalsIgnoreCase("all")) {
      for (File file : new File(".").listFiles()) {
        if (!file.isDirectory() && file.getName().endsWith(".jar")) {
          changeAccess(file.getName());
        }
      }
      return;
    }
    if (!args.get(0).endsWith(".jar")) {
      LOGGER.info(args.get(0) + " is not a jar");
      return;
    }
    changeAccess(args.get(0));
  }

  //Changes class and method access to public
  private void changeAccess(String fileName) {
    File file = new File(fileName);
    if (!file.exists()) {
      LOGGER.info(fileName + " doesn't exist");
      return;
    }
    File output = new File(fileName.replace(".jar", "-modified.jar"));
    ZipOutputStream out = null;
    try {
      out = new ZipOutputStream(new FileOutputStream(output));
    } catch (FileNotFoundException ex) {
      Logger.getLogger(ChangeAccess.class.getName()).log(Level.SEVERE, null, ex);
    }
    try {
      ZipFile zipFile = new ZipFile(file);
      Enumeration<? extends ZipEntry> entries = zipFile.entries();
      while (entries.hasMoreElements()) {
        ZipEntry entry = (ZipEntry) entries.nextElement();
        if (entry.isDirectory() || !entry.getName().endsWith(".class")) {
          LOGGER.info(entry.getName() + " is not a class");
          continue;
        }
        InputStream inputStream = zipFile.getInputStream(entry);
        ClassReader classReader;
        try {
          classReader = new ClassReader(inputStream);
        } catch (Exception e) {
          e.printStackTrace();
          continue;
        }
        ClassNode classNode = new ClassNode();
        classReader.accept(classNode, 0);
        ClassWriter classWriter = new ClassWriter(0);
        classNode.access = 1;
        classNode.methods.forEach((method) -> {
          method.access = 1;
        });
        classNode.accept(classWriter);
        ZipEntry newEntry = new ZipEntry(entry.getName());
        out.putNextEntry(newEntry);
        writeToFile(out, new ByteArrayInputStream(classWriter.toByteArray()));
      }
      LOGGER.info("Finished changing access for " + file.getName());
    } catch (IOException ex) {
      ex.printStackTrace();
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    try {
      out.close();
    } catch (IOException ex) {
      Logger.getLogger(ChangeAccess.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  public static void writeToFile(ZipOutputStream outputStream, InputStream inputStream) throws Throwable {
    byte[] buffer = new byte[4096];
    try {
      while (inputStream.available() > 0) {
        int data = inputStream.read(buffer);
        outputStream.write(buffer, 0, data);
      }
    } finally {
      inputStream.close();
      outputStream.closeEntry();
    }
  }

  @Override
  public String getDescription() {
    return "Changes the access to every class and method in the provided jar to public";
  }

}
