package optic_fusion1.antimalwaretoolkit;

import java.text.SimpleDateFormat;
import java.util.*;
import optic_fusion1.antimalwaretoolkit.database.Database;
import optic_fusion1.antimalwaretoolkit.logging.CustomLogger;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import optic_fusion1.antimalwaretoolkit.tool.impl.*;
import optic_fusion1.antimalwaretoolkit.util.shellparser.ParseException;
import optic_fusion1.antimalwaretoolkit.util.shellparser.ShellParser;

public class Main {

  private static final SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
  public static final CustomLogger LOGGER = new CustomLogger();
  private final HashMap<String, Tool> tools = new HashMap<>();
  public static Database DATABASE;

  public static void main(String[] args) {
    LOGGER.info("Starting...");
    DATABASE = new Database();
    new Main().main();
  }

  private Main() {
    tools.put("methodnameprinter", new MethodNamePrinter());
    tools.put("changeaccess", new ChangeAccess());
    tools.put("stringprinter", new StringPrinter());
    tools.put("cleanupinvalidfiles", new CleanupInvalidFiles());
    tools.put("cleanup", new Cleanup());
    tools.put("updatedatabase", new UpdateDatabase());
    tools.put("spigotplugindownloader", new SpigotPluginDownloader());
    tools.put("listfiles", new ListFiles());
    tools.put("sortjars", new SortJars());
    tools.put("pluginanalyzer", new PluginAnalyzer());
    tools.put("databasemigration", new DatabaseMigration());
    tools.put("playerprinter", new PlayerPrinter());
  }

  private void main() {
    Scanner scanner = new Scanner(System.in);
    LOGGER.info("Finished loading, run a tool");
    boolean isRunning = true;
    while (isRunning) {
      System.out.print("> ");
      try {
        List<String> args = ShellParser.parseString(scanner.nextLine());
        if (args.isEmpty()) {
          LOGGER.info("");
          continue;
        }
        String toolName = args.get(0).toLowerCase(Locale.ROOT);

        if ("?".equals(toolName)) {
          tools.forEach((s, tool) -> LOGGER.info(s + " - " + tool.getDescription()));
          continue;
        }
        if ("stop".equals(toolName)) {
          isRunning = false;
          continue;
        }

        Tool tool = tools.get(toolName);
        if (tool == null) {
          LOGGER.info(toolName + " is not a valid tool");
          continue;
        }
        if (args.size() == 2 && args.get(1).equals("?")) {
          LOGGER.info(tool.getDescription());
          continue;
        }
        args.remove(0);
        tool.run(args);
      } catch (ParseException ex) {
        ex.printStackTrace();
      }
    }
    LOGGER.info("Goodbye");
  }

}
